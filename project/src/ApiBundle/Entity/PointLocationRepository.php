<?php

namespace ApiBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * PointLocationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointLocationRepository extends EntityRepository
{
    public function findValidPoint($long, $lat)
    {
        $sql = "SELECT
                  points.id, points.name, description, status, latitude, longitude,
                  (
                    3959 * acos (
                      cos ( radians({$lat}) )
                      * cos( radians( latitude ) )
                      * cos( radians( longitude ) - radians({$long}) )
                      + sin ( radians({$lat}) )
                      * sin( radians( latitude ) )
                    )
                  ) AS distance
                FROM point_location
                JOIN points on points.point_location = point_location.id
                HAVING distance < 1
                ORDER BY distance
                LIMIT 1";


        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $points = $stmt->fetchAll();

        return (!empty($points)) ? $points[0] : [];
    }

    public function findValidPoints($long, $lat)
    {
        $sql = "SELECT
                  points.id, points.name, description, status, latitude, longitude,
                  (
                    3959 * acos (
                      cos ( radians({$lat}) )
                      * cos( radians( latitude ) )
                      * cos( radians( longitude ) - radians({$long}) )
                      + sin ( radians({$lat}) )
                      * sin( radians( latitude ) )
                    )
                  ) AS distance
                FROM point_location
                JOIN points on points.point_location = point_location.id
                HAVING distance < 1
                ORDER BY distance";


        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();

        return $stmt->fetchAll();
    }
}
