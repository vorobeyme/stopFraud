<?php

namespace ApiBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * PointLocationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointLocationRepository extends EntityRepository
{
    const EARTH_RADIUS = 6378137; // meters
    
    /**
     *
     * @param float $lng Longitude
     * @param float $lat Latitude
     * @param integer $maxDistance Max allowed distance in meters
     * @return array
     */
    public function findValidPoint($lng, $lat, $maxDistance = 1000)
    {
        $sql = sprintf('SELECT p.id, p.name, p.description, p.`status`, pl.latitude, pl.longitude,
                        (
                          %F * acos (
                            cos ( radians(%2$F) )
                            * cos( radians( pl.latitude ) )
                            * cos( radians( pl.longitude ) - radians(%3$F) )
                            + sin ( radians(%2$F) )
                            * sin( radians( pl.latitude ) )
                          )
                        ) AS distance
                        FROM point_location pl
                        JOIN points p on p.id = pl.point_id
                        HAVING distance < %4$d
                        ORDER BY distance
                        LIMIT 1', self::EARTH_RADIUS, $lat, $lng, $maxDistance);

        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $points = $stmt->fetchAll();

        return (!empty($points)) ? $points[0] : [];
    }

    /**
     *
     * @param float $lng Longitude
     * @param float $lat Latitude
     * @param integer $maxDistance Max allowed distance in meters
     * @return array
     */
    public function findValidPoints($lng, $lat, $maxDistance = 1000)
    {
        $sql = sprintf('SELECT p.id, p.name, p.description, p.`status`, pl.latitude, pl.longitude,
                        (
                          %F * acos (
                            cos ( radians(%2$F) )
                            * cos( radians( pl.latitude ) )
                            * cos( radians( pl.longitude ) - radians(%3$F) )
                            + sin ( radians(%2$F) )
                            * sin( radians( pl.latitude ) )
                          )
                        ) AS distance
                        FROM point_location pl
                        JOIN points p on p.id = pl.point_id
                        HAVING distance < %4$d
                        ORDER BY distance', self::EARTH_RADIUS, $lat, $lng, $maxDistance);

        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();

        return $stmt->fetchAll();
    }
}
